(def gmem (pv f fr to)
     (if (no pv) (gmem (table) f fr to)
       (is fr to nil) (do (zap f pv!value) pv)
       (no fr) (gmem pv f '(0) to)
       (no to) (gmem pv f fr '(9))
       (is to.0 fr.0) (do (zap [gmem _ f (cdr fr) (cdr to)] (pv fr.0)) pv)
	     (do (zap [gmem _ f (cdr fr) nil] (pv fr.0)) 
	       (for x (+ fr.0 1) (- to.0 1) (zap [gmem _ f nil nil] pv.x))
	       (zap [gmem _ f nil (cdr to)] (pv to.0))
	       pv)))

(def recall (f default pv path)
     (if (no pv) (f nil default)
         (no path) (f pv!value default)
	 t (recall f (f pv!value default) (pv (car path)) (cdr path))))

(def int-path (depth i)
  (let ls (map [X coerce 'string coerce 'int] (i coerce 'string coerce 'cons))
    (depth - (len ls) (afn (dep ls) (if (dep is 0) ls (dep - 1 self (0 cons ls)))) ls)))
